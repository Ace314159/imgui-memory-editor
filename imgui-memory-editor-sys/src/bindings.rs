/* automatically generated by rust-bindgen */

#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(dead_code)]
#![allow(non_camel_case_types)]

pub type size_t = ::std::os::raw::c_ulonglong;
pub type ImGuiDataType = ::std::os::raw::c_int;
pub type ImU8 = ::std::os::raw::c_uchar;
pub type ImU32 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryEditor {
    pub Open: bool,
    pub ReadOnly: bool,
    pub Cols: ::std::os::raw::c_int,
    pub OptShowOptions: bool,
    pub OptShowDataPreview: bool,
    pub OptShowHexII: bool,
    pub OptShowAscii: bool,
    pub OptGreyOutZeroes: bool,
    pub OptUpperCaseHex: bool,
    pub OptMidColsCount: ::std::os::raw::c_int,
    pub OptAddrDigitsCount: ::std::os::raw::c_int,
    pub HighlightColor: ImU32,
    pub ReadFn: ::std::option::Option<unsafe extern "C" fn(data: *const ImU8, off: size_t) -> ImU8>,
    pub WriteFn: ::std::option::Option<unsafe extern "C" fn(data: *mut ImU8, off: size_t, d: ImU8)>,
    pub HighlightFn:
        ::std::option::Option<unsafe extern "C" fn(data: *const ImU8, off: size_t) -> bool>,
    pub ContentsWidthChanged: bool,
    pub DataPreviewAddr: size_t,
    pub DataEditingAddr: size_t,
    pub DataEditingTakeFocus: bool,
    pub DataInputBuf: [::std::os::raw::c_char; 32usize],
    pub AddrInputBuf: [::std::os::raw::c_char; 32usize],
    pub GotoAddr: size_t,
    pub HighlightMin: size_t,
    pub HighlightMax: size_t,
    pub PreviewEndianess: ::std::os::raw::c_int,
    pub PreviewDataType: ImGuiDataType,
}
pub const MemoryEditor_DataFormat_DataFormat_Bin: MemoryEditor_DataFormat = 0;
pub const MemoryEditor_DataFormat_DataFormat_Dec: MemoryEditor_DataFormat = 1;
pub const MemoryEditor_DataFormat_DataFormat_Hex: MemoryEditor_DataFormat = 2;
pub const MemoryEditor_DataFormat_DataFormat_COUNT: MemoryEditor_DataFormat = 3;
pub type MemoryEditor_DataFormat = i32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MemoryEditor_Sizes {
    pub AddrDigitsCount: ::std::os::raw::c_int,
    pub LineHeight: f32,
    pub GlyphWidth: f32,
    pub HexCellWidth: f32,
    pub SpacingBetweenMidCols: f32,
    pub PosHexStart: f32,
    pub PosHexEnd: f32,
    pub PosAsciiStart: f32,
    pub PosAsciiEnd: f32,
    pub WindowWidth: f32,
}
#[test]
fn bindgen_test_layout_MemoryEditor_Sizes() {
    assert_eq!(
        ::std::mem::size_of::<MemoryEditor_Sizes>(),
        40usize,
        concat!("Size of: ", stringify!(MemoryEditor_Sizes))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryEditor_Sizes>(),
        4usize,
        concat!("Alignment of ", stringify!(MemoryEditor_Sizes))
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MemoryEditor_Sizes>())).AddrDigitsCount as *const _ as usize
        },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(AddrDigitsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor_Sizes>())).LineHeight as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(LineHeight)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor_Sizes>())).GlyphWidth as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(GlyphWidth)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor_Sizes>())).HexCellWidth as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(HexCellWidth)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MemoryEditor_Sizes>())).SpacingBetweenMidCols as *const _
                as usize
        },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(SpacingBetweenMidCols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor_Sizes>())).PosHexStart as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(PosHexStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor_Sizes>())).PosHexEnd as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(PosHexEnd)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MemoryEditor_Sizes>())).PosAsciiStart as *const _ as usize
        },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(PosAsciiStart)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor_Sizes>())).PosAsciiEnd as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(PosAsciiEnd)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor_Sizes>())).WindowWidth as *const _ as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor_Sizes),
            "::",
            stringify!(WindowWidth)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}??0Sizes@MemoryEditor@@QEAA@XZ"]
    pub fn MemoryEditor_Sizes_Sizes(this: *mut MemoryEditor_Sizes);
}
impl MemoryEditor_Sizes {
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        MemoryEditor_Sizes_Sizes(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
#[test]
fn bindgen_test_layout_MemoryEditor() {
    assert_eq!(
        ::std::mem::size_of::<MemoryEditor>(),
        184usize,
        concat!("Size of: ", stringify!(MemoryEditor))
    );
    assert_eq!(
        ::std::mem::align_of::<MemoryEditor>(),
        8usize,
        concat!("Alignment of ", stringify!(MemoryEditor))
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).Open as *const _ as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(Open)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).ReadOnly as *const _ as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(ReadOnly)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).Cols as *const _ as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(Cols)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).OptShowOptions as *const _ as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(OptShowOptions)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).OptShowDataPreview as *const _ as usize },
        9usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(OptShowDataPreview)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).OptShowHexII as *const _ as usize },
        10usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(OptShowHexII)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).OptShowAscii as *const _ as usize },
        11usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(OptShowAscii)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).OptGreyOutZeroes as *const _ as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(OptGreyOutZeroes)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).OptUpperCaseHex as *const _ as usize },
        13usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(OptUpperCaseHex)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).OptMidColsCount as *const _ as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(OptMidColsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).OptAddrDigitsCount as *const _ as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(OptAddrDigitsCount)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).HighlightColor as *const _ as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(HighlightColor)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).ReadFn as *const _ as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(ReadFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).WriteFn as *const _ as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(WriteFn)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).HighlightFn as *const _ as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(HighlightFn)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MemoryEditor>())).ContentsWidthChanged as *const _ as usize
        },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(ContentsWidthChanged)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).DataPreviewAddr as *const _ as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(DataPreviewAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).DataEditingAddr as *const _ as usize },
        72usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(DataEditingAddr)
        )
    );
    assert_eq!(
        unsafe {
            &(*(::std::ptr::null::<MemoryEditor>())).DataEditingTakeFocus as *const _ as usize
        },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(DataEditingTakeFocus)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).DataInputBuf as *const _ as usize },
        81usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(DataInputBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).AddrInputBuf as *const _ as usize },
        113usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(AddrInputBuf)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).GotoAddr as *const _ as usize },
        152usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(GotoAddr)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).HighlightMin as *const _ as usize },
        160usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(HighlightMin)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).HighlightMax as *const _ as usize },
        168usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(HighlightMax)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).PreviewEndianess as *const _ as usize },
        176usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(PreviewEndianess)
        )
    );
    assert_eq!(
        unsafe { &(*(::std::ptr::null::<MemoryEditor>())).PreviewDataType as *const _ as usize },
        180usize,
        concat!(
            "Offset of field: ",
            stringify!(MemoryEditor),
            "::",
            stringify!(PreviewDataType)
        )
    );
}
extern "C" {
    #[link_name = "\u{1}?GotoAddrAndHighlight@MemoryEditor@@QEAAX_K0@Z"]
    pub fn MemoryEditor_GotoAddrAndHighlight(
        this: *mut MemoryEditor,
        addr_min: size_t,
        addr_max: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}?CalcSizes@MemoryEditor@@QEAAXAEAUSizes@1@_K1@Z"]
    pub fn MemoryEditor_CalcSizes(
        this: *mut MemoryEditor,
        s: *mut MemoryEditor_Sizes,
        mem_size: size_t,
        base_display_addr: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}?DrawWindow@MemoryEditor@@QEAAXPEBDPEAX_K2@Z"]
    pub fn MemoryEditor_DrawWindow(
        this: *mut MemoryEditor,
        title: *const ::std::os::raw::c_char,
        mem_data: *mut ::std::os::raw::c_void,
        mem_size: size_t,
        base_display_addr: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}?DrawContents@MemoryEditor@@QEAAXPEAX_K1@Z"]
    pub fn MemoryEditor_DrawContents(
        this: *mut MemoryEditor,
        mem_data_void: *mut ::std::os::raw::c_void,
        mem_size: size_t,
        base_display_addr: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}?DrawOptionsLine@MemoryEditor@@QEAAXAEBUSizes@1@PEAX_K2@Z"]
    pub fn MemoryEditor_DrawOptionsLine(
        this: *mut MemoryEditor,
        s: *const MemoryEditor_Sizes,
        mem_data: *mut ::std::os::raw::c_void,
        mem_size: size_t,
        base_display_addr: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}?DrawPreviewLine@MemoryEditor@@QEAAXAEBUSizes@1@PEAX_K2@Z"]
    pub fn MemoryEditor_DrawPreviewLine(
        this: *mut MemoryEditor,
        s: *const MemoryEditor_Sizes,
        mem_data_void: *mut ::std::os::raw::c_void,
        mem_size: size_t,
        base_display_addr: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}?DataTypeGetDesc@MemoryEditor@@QEBAPEBDH@Z"]
    pub fn MemoryEditor_DataTypeGetDesc(
        this: *const MemoryEditor,
        data_type: ImGuiDataType,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?DataTypeGetSize@MemoryEditor@@QEBA_KH@Z"]
    pub fn MemoryEditor_DataTypeGetSize(
        this: *const MemoryEditor,
        data_type: ImGuiDataType,
    ) -> size_t;
}
extern "C" {
    #[link_name = "\u{1}?DataFormatGetDesc@MemoryEditor@@QEBAPEBDW4DataFormat@1@@Z"]
    pub fn MemoryEditor_DataFormatGetDesc(
        this: *const MemoryEditor,
        data_format: MemoryEditor_DataFormat,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?IsBigEndian@MemoryEditor@@QEBA_NXZ"]
    pub fn MemoryEditor_IsBigEndian(this: *const MemoryEditor) -> bool;
}
extern "C" {
    #[link_name = "\u{1}?EndianessCopyBigEndian@MemoryEditor@@SAPEAXPEAX0_KH@Z"]
    pub fn MemoryEditor_EndianessCopyBigEndian(
        _dst: *mut ::std::os::raw::c_void,
        _src: *mut ::std::os::raw::c_void,
        s: size_t,
        is_little_endian: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?EndianessCopyLittleEndian@MemoryEditor@@SAPEAXPEAX0_KH@Z"]
    pub fn MemoryEditor_EndianessCopyLittleEndian(
        _dst: *mut ::std::os::raw::c_void,
        _src: *mut ::std::os::raw::c_void,
        s: size_t,
        is_little_endian: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?EndianessCopy@MemoryEditor@@QEBAPEAXPEAX0_K@Z"]
    pub fn MemoryEditor_EndianessCopy(
        this: *const MemoryEditor,
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void;
}
extern "C" {
    #[link_name = "\u{1}?FormatBinary@MemoryEditor@@QEBAPEBDPEBEH@Z"]
    pub fn MemoryEditor_FormatBinary(
        this: *const MemoryEditor,
        buf: *const u8,
        width: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char;
}
extern "C" {
    #[link_name = "\u{1}?DrawPreviewData@MemoryEditor@@QEBAX_KPEBE0HW4DataFormat@1@PEAD0@Z"]
    pub fn MemoryEditor_DrawPreviewData(
        this: *const MemoryEditor,
        addr: size_t,
        mem_data: *const ImU8,
        mem_size: size_t,
        data_type: ImGuiDataType,
        data_format: MemoryEditor_DataFormat,
        out_buf: *mut ::std::os::raw::c_char,
        out_buf_size: size_t,
    );
}
extern "C" {
    #[link_name = "\u{1}??0MemoryEditor@@QEAA@XZ"]
    pub fn MemoryEditor_MemoryEditor(this: *mut MemoryEditor);
}
impl MemoryEditor {
    #[inline]
    pub unsafe fn GotoAddrAndHighlight(&mut self, addr_min: size_t, addr_max: size_t) {
        MemoryEditor_GotoAddrAndHighlight(self, addr_min, addr_max)
    }
    #[inline]
    pub unsafe fn CalcSizes(
        &mut self,
        s: *mut MemoryEditor_Sizes,
        mem_size: size_t,
        base_display_addr: size_t,
    ) {
        MemoryEditor_CalcSizes(self, s, mem_size, base_display_addr)
    }
    #[inline]
    pub unsafe fn DrawWindow(
        &mut self,
        title: *const ::std::os::raw::c_char,
        mem_data: *mut ::std::os::raw::c_void,
        mem_size: size_t,
        base_display_addr: size_t,
    ) {
        MemoryEditor_DrawWindow(self, title, mem_data, mem_size, base_display_addr)
    }
    #[inline]
    pub unsafe fn DrawContents(
        &mut self,
        mem_data_void: *mut ::std::os::raw::c_void,
        mem_size: size_t,
        base_display_addr: size_t,
    ) {
        MemoryEditor_DrawContents(self, mem_data_void, mem_size, base_display_addr)
    }
    #[inline]
    pub unsafe fn DrawOptionsLine(
        &mut self,
        s: *const MemoryEditor_Sizes,
        mem_data: *mut ::std::os::raw::c_void,
        mem_size: size_t,
        base_display_addr: size_t,
    ) {
        MemoryEditor_DrawOptionsLine(self, s, mem_data, mem_size, base_display_addr)
    }
    #[inline]
    pub unsafe fn DrawPreviewLine(
        &mut self,
        s: *const MemoryEditor_Sizes,
        mem_data_void: *mut ::std::os::raw::c_void,
        mem_size: size_t,
        base_display_addr: size_t,
    ) {
        MemoryEditor_DrawPreviewLine(self, s, mem_data_void, mem_size, base_display_addr)
    }
    #[inline]
    pub unsafe fn DataTypeGetDesc(
        &self,
        data_type: ImGuiDataType,
    ) -> *const ::std::os::raw::c_char {
        MemoryEditor_DataTypeGetDesc(self, data_type)
    }
    #[inline]
    pub unsafe fn DataTypeGetSize(&self, data_type: ImGuiDataType) -> size_t {
        MemoryEditor_DataTypeGetSize(self, data_type)
    }
    #[inline]
    pub unsafe fn DataFormatGetDesc(
        &self,
        data_format: MemoryEditor_DataFormat,
    ) -> *const ::std::os::raw::c_char {
        MemoryEditor_DataFormatGetDesc(self, data_format)
    }
    #[inline]
    pub unsafe fn IsBigEndian(&self) -> bool {
        MemoryEditor_IsBigEndian(self)
    }
    #[inline]
    pub unsafe fn EndianessCopyBigEndian(
        _dst: *mut ::std::os::raw::c_void,
        _src: *mut ::std::os::raw::c_void,
        s: size_t,
        is_little_endian: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        MemoryEditor_EndianessCopyBigEndian(_dst, _src, s, is_little_endian)
    }
    #[inline]
    pub unsafe fn EndianessCopyLittleEndian(
        _dst: *mut ::std::os::raw::c_void,
        _src: *mut ::std::os::raw::c_void,
        s: size_t,
        is_little_endian: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_void {
        MemoryEditor_EndianessCopyLittleEndian(_dst, _src, s, is_little_endian)
    }
    #[inline]
    pub unsafe fn EndianessCopy(
        &self,
        dst: *mut ::std::os::raw::c_void,
        src: *mut ::std::os::raw::c_void,
        size: size_t,
    ) -> *mut ::std::os::raw::c_void {
        MemoryEditor_EndianessCopy(self, dst, src, size)
    }
    #[inline]
    pub unsafe fn FormatBinary(
        &self,
        buf: *const u8,
        width: ::std::os::raw::c_int,
    ) -> *const ::std::os::raw::c_char {
        MemoryEditor_FormatBinary(self, buf, width)
    }
    #[inline]
    pub unsafe fn DrawPreviewData(
        &self,
        addr: size_t,
        mem_data: *const ImU8,
        mem_size: size_t,
        data_type: ImGuiDataType,
        data_format: MemoryEditor_DataFormat,
        out_buf: *mut ::std::os::raw::c_char,
        out_buf_size: size_t,
    ) {
        MemoryEditor_DrawPreviewData(
            self,
            addr,
            mem_data,
            mem_size,
            data_type,
            data_format,
            out_buf,
            out_buf_size,
        )
    }
    #[inline]
    pub unsafe fn new() -> Self {
        let mut __bindgen_tmp = ::std::mem::MaybeUninit::uninit();
        MemoryEditor_MemoryEditor(__bindgen_tmp.as_mut_ptr());
        __bindgen_tmp.assume_init()
    }
}
